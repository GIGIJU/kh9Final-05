<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="join">
	<select id="list" resultType="JoinListVO" parameterType="Map">
		select * from(
				select rownum rn, TMP.* from (
					select join_no,tee_time_d,tee_time_t,field_area,field_name,join_people,booking_price/4 as booking_price,
				join_time,member_nick,join_info,join_status,course_name,member_id from 
		    join J 
		        inner join member M on M.member_id = J.member_id
		        inner join booking B on J.booking_no = B.booking_no
		        inner join tee_time T on B.tee_time_no = T.tee_time_no
		        inner join golf_course C on T.course_no = C.course_no
		        inner join golf_field G on G.field_no = C.field_no
		       	<if test="type != null and keyword != null">
					<![CDATA[ where instr(${type}, #{keyword}) > 0 	]]>
				</if>
				order by join_no desc
				) TMP
		)where rn between #{begin} and #{end}
	</select>
	
	<select id="count" parameterType="Map" resultType="int">
		select count(*) from 
			(select join_no,tee_time_d,tee_time_t,field_area,field_name,join_people,booking_price/4 as booking_price,
				join_time,member_nick,join_info,join_status,course_name from 
		    join J 
		        inner join member M on M.member_id = J.member_id
		        inner join booking B on J.booking_no = B.booking_no
		        inner join tee_time T on B.tee_time_no = T.tee_time_no
		        inner join golf_course C on T.course_no = C.course_no
		        inner join golf_field G on G.field_no = C.field_no
			<if test="type != null and keyword != null">
				<![CDATA[where instr(${type},#{keyword}) > 0 ]]>		
			</if>
			)
	</select>
	
	<select id="applySequence" resultType="int">
		select join_apply_seq.nextval from dual
	</select>
	
	<insert id="applyInsert" parameterType="JoinApplyDto">
		insert into join_apply(join_apply_no,join_no,member_id,join_apply_people,join_apply_info)
		values(#{joinApplyNo},#{joinNo},#{memberId},#{joinApplyPeople},#{joinApplyInfo})
	</insert>
	
	<update id="addJoinPeople" parameterType="Map">
		update join set join_people = (join_people-#{joinApplyPeople}) where join_no=#{joinNo}
	</update>
	
	
	<select id="sequence" resultType="int">
		select join_seq.nextval from dual
	</select>
	
	<insert id="insert" parameterType="JoinDto">
		insert into join(join_no,booking_no,member_id,join_info,join_people)
		values(#{joinNo},#{bookingNo},#{memberId},#{joinInfo},#{joinPeople})
	</insert>
	
	<select id="myJoin" resultType="JoinListVO" parameterType="String">
		select join_no,tee_time_d,tee_time_t,field_area,field_name,join_people,booking_price/4 as booking_price,
			join_time,member_nick,join_info,join_status,course_name,member_id from 
	    join J 
	        inner join member M on M.member_id = J.member_id
	        inner join booking B on J.booking_no = B.booking_no
	        inner join tee_time T on B.tee_time_no = T.tee_time_no
	        inner join golf_course C on T.course_no = C.course_no
	        inner join golf_field G on G.field_no = C.field_no
	        where member_id =#{memberId}
			order by join_no desc
	</select>
	
		<resultMap type="MyJoinListVO" id="joinMap">
		<!-- 객체에 대한 매핑 설정 : association -자료형은 변수에 맞게 자동 변환되며 불가능할 경우 -->
		<association property="joinListVO" javaType="JoinListVO">
			<result column="join_no" property="joinNo" />
			<result column="tee_time_d" property="teeTimeD" />
			<result column="tee_time_t" property="teeTimeT" />
			<result column="field_area" property="fieldArea" />
			<result column="field_name" property="fieldName" />
			<result column="join_people" property="joinPeople" />
			<result column="booking_price" property="bookingPrice" />
			<result column="join_time" property="joinTime" />
			<result column="member_nick" property="memberNick" />
			<result column="join_info" property="joinInfo" />
			<result column="join_status" property="joinStatus" />
			<result column="course_name" property="courseName" />
			<result column="member_id" property="memberId" />
		</association>
		<!-- 컬렉션(List<paymentDetailDto>)에 대한 매핑 설정 : collection -컬렉션 자료형을 두 가지로 
			설정해야 한다 -javaType : 컬렉션의 자료형 -ofType : 내용물의 자료형(Generic type) -내부에는 객체처럼 
			result를 이용하여 매핑을 수행한다 -(반드시)해당 컬렉션을 채우기 위해 필요한 select 구문의 id를 지정해야 한다(select,columnx) -->
		<collection property="joinApplyList" javaType="List" ofType="JoinApplyDto" select="treeSearchSubquery" column="join_no">
			<result column="join_apply_no" property="joinApplyNo" />
			<result column="join_no" property="joinNo" />
			<result column="member_id" property="memberId" />
			<result column="join_apply_people" property="joinApplyPeople" />
			<result column="join_apply_info" property="joinApplyInfo" />
			<result column="join_apply_status" property="joinApplyStatus" />
		</collection>
	</resultMap>
	
	<select id="myJoinTreeSearch" resultMap="joinMap" parameterType="String">
		select join_no,tee_time_d,tee_time_t,field_area,field_name,join_people,booking_price/4 as booking_price,
			join_time,member_nick,join_info,join_status,course_name,member_id from 
	    join J 
	        inner join member M on M.member_id = J.member_id
	        inner join booking B on J.booking_no = B.booking_no
	        inner join tee_time T on B.tee_time_no = T.tee_time_no
	        inner join golf_course C on T.course_no = C.course_no
	        inner join golf_field G on G.field_no = C.field_no
	        where member_id =#{memberId}
			order by join_no desc 
	</select>
	<select id="treeSearchSubquery" resultType="JoinApplyDto" parameterType="int">
		select * from join_apply where join_no=#{joinNo}
	</select>
	
	<select id="getJoinNo" parameterType="int" resultType="int">
		select join_no from join_apply where join_apply_no= #{joinApplyNo}
	</select>
	
	<update id="joinApplyApprove" parameterType="int">
		update join_apply set join_apply_status = 1 where join_apply_no=#{joinApplyNo}
	</update>
	
	<update id="joinApplyRefuse" parameterType="int">
		update join_apply set join_apply_status = 2 where join_apply_no=#{joinApplyNo}
	</update>
	
	<select id="getJoinPeople" parameterType="int" resultType="int">
		select join_people from join where join_no = #{joinNo} 
	</select>

	<update id="closeJoin" parameterType="int">
		update join set join_status = 1 where join_no= #{joinNo}
	</update> 
</mapper> 








<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="golfField">

	<select id="list" resultType="GolfFieldDto" parameterType="Map">
	 select * from(
		select rownum rn, TMP.* from (
            select * from golf_field 
          <if test ="type != null and area !=null">
          <![CDATA[where instr(${type}, #{area}) > 0]]>
          </if>
			) TMP
		)where rn between #{begin} and #{end}	
    </select>
          
    <select id="count" parameterType="Map" resultType="int">
      select count(*) from golf_field
      <if test="type != null and keyword != null">
         <![CDATA[
         where instr(${type}, #{keyword}) > 0
         ]]>
      </if>
   </select>
	
	<select id="one" resultType="GolfFieldDto" parameterType="int">
		select * from golf_field where field_no = #{fieldNo}
	</select>
	
	
	<select id="seleteCourse" resultType="GolfCourseDto" parameterType="int">
		select * from golf_course where course_no=#{courseNo}
	</select>
	
	<select id="search" resultType="BookingSearchListVO" parameterType="Map">
		<bind name="fieldAreaExist" value="fieldArea != null and !fieldArea.equals('')"/> 
		select F.field_no, F.field_name, F.field_area, F.field_greenfee,F.field_prepay, B.count from golf_field F inner join(
		select field_no, count(*) as count from(
			select 
			G.field_no, G.field_name, G.field_greenfee, B.course_name, B.tee_time_t, B.part_time, 
			B.tee_time_no,G.field_area from golf_field G left outer join
			(
			select * from golf_course C inner join 
			(
			select T.tee_time_no,T.course_no,T.tee_time_t,T.part_time,B.booking_date,B.booking_people from tee_time T 
			left outer join (select * from booking where tee_time_d= to_date(#{teeTimeD},'YYYY-MM-DD')) B 
			on T.tee_time_no = B.tee_time_no where booking_people is null
			) B on B.course_no = C.course_no 
			) B on B.field_no = G.field_no 
	 		<where>
	 			 and tee_time_t is not null
				<if test="partTime > 0">
					and part_time = #{partTime}
				</if>
				<if test="fieldAreaExist">
					and field_area = #{fieldArea}
				</if>
	 			<if test="fieldGreenfee > 0">
				<![CDATA[
					and field_greenfee <= #{fieldGreenfee}
				]]>
				</if>
			</where> 
 		) group by field_no having count(*) > 0
        ) B on B.field_no = F.field_no
	</select>
	
	<update id="commissionUpdate" parameterType="Map">
		update golf_field set field_commission = (field_commission + #{commission}) where field_no = #{fieldNo}
	</update>
	
	
	<select id="ranking" resultType="BookingSearchListVO">
		<![CDATA[
		select F.field_no, F.field_name, F.field_area, F.field_greenfee, F.field_prepay, C.count from golf_field F 
			inner join 
			(select field_name, count(*) as count from
			(select * from 
			    golf_field F 
			        inner join golf_course C on F.field_no = C.field_no
			        inner join tee_time T on C.course_no = T.course_no
			        inner join booking B on T.tee_time_no = B.tee_time_no
			) GROUP BY field_name order by count desc) C on F.field_name = C.field_name  where rownum<=3
		]]>
	</select>
	
	<select id="prepay" resultType="GolfFieldDto">
		<![CDATA[select * from golf_field where field_prepay = 1 and rownum <=3]]>
	</select>
	
	<select id="cheap" resultType="GolfFieldDto">
		<![CDATA[select * from (select * from golf_field where field_greenfee <= 150000 order by field_greenfee) where rownum <=3]]>
	</select>
	
	<!-- 골프부킹 전체리스트 -->
	<select id="listAll" resultType="GolfFieldDto" parameterType="Map">
	 select * from(
		select rownum rn, TMP.* from (
            select * from golf_field 
	        <if test ="type != null">
	        	<if test="type == 'field_prepay'">
					order by field_prepay desc
	        	</if>
	        	<if test="type == 'field_greenfee'">
					order by field_greenfee
	        	</if>
	        	<if test="type == 'field_no'">
	        		order by field_no
	        	</if>
			</if>
			) TMP
		)where rn between #{begin} and #{end}	
    </select> 
    
    <select id="countAll" resultType="int">
      select count(*) from golf_field
   </select>
	
	<!-- 골프장 정보 입력을 위한 시퀀스 조회 @이기주 -->
	<select id="sequence" resultType="int">
		select golf_field_seq.nextval from dual
	</select>
	
	<!-- 골프장 정보 입력 @이기주 -->
	<insert id="insert" parameterType="GolfFieldDto">
		insert into golf_field(
		field_no, field_name, field_info, field_post, field_basic_address, field_detail_address, 
		field_phone, field_caddiefee, field_cartfee, field_greenfee, 
		field_openday, field_prepay,field_area
		)
		values (
		#{fieldNo}, #{fieldName}, #{fieldInfo},#{fieldPost},#{fieldBasicAddress},#{fieldDetailAddress},
		#{fieldPhone}, #{fieldCaddiefee}, #{fieldCartfee}, #{fieldGreenfee}, 
		to_date(#{fieldOpenday},'YYYY-MM-DD'), #{fieldPrepay},#{fieldArea}
		)
	</insert>
	
	<!-- 골프장 이름으로 번호 검색 @이기주 -->
	<select id="searchNo">
		select field_no from golf_field where field_name = #{fieldName}
	</select>
	
	<!-- 골프장 단순 전체 조회 -->
	<select id="searchSimple" resultType="GolfFieldDto">
		select field_no, field_name from golf_field
	</select>
		

</mapper> 





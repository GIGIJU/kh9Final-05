<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="review">
	<select id="sequence" resultType="int">
		select review_seq.nextval from dual
	</select>
	
	<select id="list" resultType="ReviewProfileVO" parameterType="Map">
		select * from (
        	select rownum rn, TMP.* from (
            	select * from review left outer join member_profile on(review.review_writer = member_profile.member_id) left outer join member on (review.review_writer = member.member_id)
	               <if test="keyword != null">
						<![CDATA[ where instr(field_name, #{keyword}) > 0 	]]>
					</if>
            	order by review.review_no desc	
        	)TMP
		) where rn between #{begin} and #{end} 
	</select>
	
	<select id="count" parameterType="String" resultType="int">
		select count(*) from review
		<if test="keyword != null">
			<![CDATA[
			where instr(field_name, #{keyword}) > 0
			]]>
		</if>
	</select>
	
	<insert id="write" parameterType="ReviewDto">
		insert into review (review_no,review_writer,field_name,review_title,review_rating,review_caddie,review_cos,review_price,review_facility,review_content)
		values
			(
				#{reviewNo},#{reviewWriter},#{fieldName},#{reviewTitle},
				#{reviewRating},#{reviewCaddie},#{reviewCos},#{reviewPrice},
				#{reviewFacility},#{reviewContent}
			)
	</insert>
	
	<update id="plusReadcount" parameterType="int">
		update review
		set review_readcount = review_readcount + 1
		where review_no = #{reviewNo}
	</update>
	
	<select id="one" parameterType="int" resultType="ReviewDto">
		select * from review where review_no = #{reviewNo}
	</select>
	
	<update id="edit" parameterType="ReviewDto">
		update review
		set
			review_title = #{reviewTitle},
			review_time = sysdate,
			review_content = #{reviewContent}
		where
			review_no = #{reviewNo}
	</update>
	
	<delete id="delete" parameterType="int">
		delete review
		where 
			review_no = #{reviewNo}
	</delete>
	
	<select id="otherview" resultType="ReviewDto" parameterType="String">
		select * from review
		where
			field_name = #{fieldName}
		order by review_no desc
	</select>
	
	<select id="ratingView" resultType="double" parameterType="String">
		select avg(review_rating) from review
		where 
			field_name = #{fieldName}
	</select>
	
	<select id="oneFiledList" resultType="ReviewProfileVO" parameterType="String">
		select * from review left outer join member_profile 
		on(review.review_writer = member_profile.member_id) left outer join member on (review.review_writer = member.member_id)
		where field_name=#{fieldName}
	</select>
	
</mapper> 








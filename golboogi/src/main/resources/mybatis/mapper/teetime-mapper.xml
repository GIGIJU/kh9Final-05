<?xml version="1.0" encoding="UTF-8"?>

<!-- mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다 - myBatis를 이용하는 개발자는 이곳에 저장된 
	SQL 구문을 "아이디"를 이용해서 호출한다 - 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 
	사용한다 - 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다 - 일반적으로 
	namespace는 테이블명으로 한다! - mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다. - <insert> - 
	<select> - <update> - <delete> - 각 구문은 반드시 아이디를 가져야 한다. - 각 구문에는 다음과 같은 속성을 
	작성할 수 있다 - parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택) - resultType 
	: 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수) - (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 
	부분을 알려준다) - 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다 - 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 
	작업도 없이 해당 위치에 데이터가 그대로 작성된다 - 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 
	추출하여 작성해준다(DTO 변수명) -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="teetime">

	<select id="list" parameterType="BookingComplexSearchVO" resultType="TeeTimeListVO">
		<bind name="fieldAreaExist" value="fieldArea != null and !fieldArea.equals('')"/> 
		select G.field_no, G.field_name, G.field_greenfee, C.course_name, T.tee_time_t, T.part_time, T.tee_time_no,B.booking_people from
    golf_field G
        inner join golf_course C on G.field_no = C.field_no
        inner join tee_time T on C.course_no = T.course_no
        left outer join (select * from booking where tee_time_d= to_date(#{teeTimeD},'YYYY-MM-DD')) B 
        on T.tee_time_no = B.tee_time_no
		<where>
	 			 and B.booking_people is null
	 			 and G.field_no = #{fieldNo}
				<if test="partTime > 0">
					and part_time = #{partTime}
				</if>
				<if test="fieldAreaExist">
					and field_area = #{fieldArea}
				</if>
	 			<if test="fieldGreenfee > 0">
				<![CDATA[
					and field_greenfee <= #{fieldGreenfee}
				]]>
				</if>
			</where> 
 		order by field_no, tee_time_t
	</select>
	
	<select id="list2" parameterType="Map" resultType="TeeTimeListVO">
		select G.field_no, G.field_name, G.field_greenfee, C.course_name, T.tee_time_t, T.part_time, T.tee_time_no,B.booking_people from
    golf_field G
        inner join golf_course C on G.field_no = C.field_no
        inner join tee_time T on C.course_no = T.course_no
        left outer join (select * from booking where tee_time_d= to_date('2022-07-30','YYYY-MM-DD')) B 
        on T.tee_time_no = B.tee_time_no
	 			 where B.booking_people is null
	 			 and G.field_no = #{fieldNo}
		order by field_no, tee_time_t
	</select>

	<select id="one" parameterType="int" resultType="Teetime1VO">
		select * from
		tee_time_1 where tee_time_no = #{teeTimeNo}
	</select>

	<select id="sequence" resultType="int">
		select tee_time_seq.nextval
		from dual
	</select>

	<insert id="insert" parameterType="TeetimeDto">
		insert into
		tee_time(tee_time_no,course_no,tee_time_t,part_time)
		values(#{teeTimeNo},#{courseNo},#{teeTimeT},#{partTime})
	</insert>


	
	<!-- 
		원하는 것
		- 검색어(지역, 날짜, 시간대, 가격)을 입력하면 조회되도록 구문을 만드는 것
			- 지역(fieldArea), 날짜(teeTimeD), 시간대(PartTime), 가격대(fieldGreenFee)
		- 필요한 테이블 : gold_fild(골프장), golf_course(골프코스), tee_time(시간표), booking(예약)		
	 	- 검색항목에 따라 예약이 안된 목록이 시간대별로 출력
	 -->
</mapper> 







